# 1) Graph 란?
#  - Graph는 Tree를 포괄하는 개념으로, 정점(Vertex, 노드)과 간선(Arc, 엣지)으로 이루어진 자료구조다.
#  - Tree에서 사용하는 노드와 엣지를 Graph에서는 Vertex와 Arc라고 부른다.

# 2) Graph 관련 용어 
#   a. Vertex: 트리 자료구조의 노드와 동일한 개념 
#   b. Arc: 트리 자료구조의 엣지(간선)와 동일한 개념 
#   c. In-degree(진입차수): Vertex로 들어오는 Arc의 갯수
#   d. Out-degree(진출차수): Vertex에서 뻗어나가는 Arc의 갯수 
#   e. Adjacent Vertex(인접경로): 하나의 Vertex에서 1개의 Arc를 통해 접근할 수 있는 Vertex 
#   f. Simple-path(단순경로): 하나의 Vertex에서 다른 Vertex로 가는 경로에 중복되는 Vertex와 Arc가 없는 경로 
#   g. Degree(차수): 무방향 그래프에서 하나의 Vertex에 인접한 Vertex의 갯수 

# 3) Graph의 구분
#   a. 방향 그래프(directed): 간선의 방향이 존재하는 그래프
#   b. 무방향 그래프(undirected): 간선의 방향이 없는 그래프

# - 이를 기반으로, Tree 자료구조는 In-degree가 1인 방향 그래프라는 것을 알 수 있다. 
# - 즉, Tree 자료구조는 특정한 제약조건을 가지는 Graph라는 것이다. 

# 4) Graph의 특성
# - Graph는 Tree와 다르게 하나의 Vertex가 1개 이상의 In-degree를 가질 수 있다. 

# 5) Graph의 종류 
#   a. 완전 그래프(complete): 모든 Vertex가 연결된 그래프 
#   b. 부분 그래프(partial): 그래프의 부분집합
#   c. 가중치 그래프(weighted graph, Network): 간선에 가중치를 할당한 그래프 
#   d. 연결 그래프(connected): 무방향 그래프의 모든 노드들이 간선으로 연결되어있는 형태
#   e. 비연결 그래프(disconnected): 간선으로 연결되지 않은 노드가 존재하는 그래프 
#   f. 순환 그래프(cycle): 방향 그래프에서 시작과 끝 정점이 동일한 그래프, 사이클이 존재한다.  
#   g. 비순환 그래프(acyclic): 사이클이 존재하지 않는 그래프 
#   h. 신장트리(Spanning Tree): 사이클이 존재하지 않는 연결그래프 
#   i. 최소신장트리(Minimum Spanning Tree): 간선의 가중치 합이 최소인 신장트리 


# 6) Graph 구현방식 및 시간복잡도 
#   a. 인접행렬: 2차원 배열을 이용하여 구현된 그래프 
#     - 구현이 간단하다. (장점)
#     - 탐색시 O(1)의 시간복잡도를 갖는다. (장점)
#     - 모든 정점과 간선에 대한 정보를 입력해야하므로 O(n^2)의 시간복잡도가 걸린다. (단점) 
#     - 무조건 2차원 배열을 사용하므로 필요 이상의 공간이 필요 및 낭비된다. (단점)

#   b. 인접리스트: 연결리스트를 이용하여 구현된 그래프
#     - 탐색시 O(n)의 시간복잡도를 갖는다. (장점)
#     - 필요한 만큼의 공간을 사용한다. (장점)
#     - 구현이 복잡하다. (단점)
#     - 특정한 2개의 정점이 연결되었는지 확인하는데 인접행렬보다 오래 걸린다.(단점)

#   c. 결론 
#     - Vertex가 적은 경우, 인접행렬을 사용한다. 
#     - Vertex가 많은 경우, 인접리스트를 사용한다. 

# 7) Graph와 Tree의 차이 
# - Graph는 노드간의 연결을 간선으로 표현한 자료구조 / Tree는 방향성이 있는 비순환 그래프 
# - Graph는 Root가 존재하지 않는 자료구조 / Tree는 Root가 존재하는 자료구조 
# - Graph는 부모/자식 관계가 없는 자료구조 / Tree는 부모/자식 관계가 있는 자료구조 

# 8) Graph 탐색방법 
#   a. BFS(Breadth First Search): 같은 level의 vertex를 먼저 탐색하는 방법 
#   b. DFS(Depth First Search): 한쪽 방향의 자식노드를 먼저 탐색하는 방법 

# 9) 면접예상질문
#   1. 인접행렬과 인접리스트의 차이점과 각각의 장단점
#   2. 연결그래프와 완전그래프의 차이점
#   3. (원래 그래프의 그림을 주고) 이 그래프로 신장 트리 N개를 만들어보기
#   4. 최소신장트리를 찾을 수 있는 알고리즘 설명 
