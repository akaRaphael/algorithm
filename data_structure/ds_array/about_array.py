# 1) Array란?
# - array는 고정된 크기를 갖는 배열이다. 
# - 최초에 선언할 때 그 크기가 정해진다.
# - array에 할당되는 데이터는 연속된 메모리 주소를 할당받는다.
# - index를 통해서 배열의 각 위치에 있는 데이터에 직접 접근이 가능하다. 

# 2) array의 성질 
# - array를 담은 변수에는 첫번째 원소의 메모리 주소를 갖고 있다.
# - array의 원소는 모두 동일한 자료형을 갖는다. 
# - index를 사용하여 data에 접근하며 data의 위치를 알 수 있다.

# 3) array의 장점
# - index를 이용한 data에 대한 random access가 가능하다. 
# - 그러므로 검색에 용이하다.
# - 연속된 메모리 공간을 할당 받기 때문에 연결리스트보다 빠른 성능을 가진다. 
# - 운영체제의 캐시 지역성을 활용할 수 있다. 
# * cache 
#    - 자주 사용하는 데이터를 빠르게 꺼내 쓸 수 있도록 
#    - 주 기억장치에 있는 데이터를 RAM에 더 가까운 캐시 메모리에 저장하는 것 
# * cache locality 
#    - 캐시에 저장하는 데이터는 지역성을 가져야한다. 
#    - 지역성이란 시공간적으로 데이터에 접근하는 위치가 가깝다는 것을 의미한다.    

# 4) array의 단점 
# - data 삭제와 삽입이 비효율적이다. (고정크기로 인해)
# - 한번 선언된 크기는 변경할 수 없다. 
# - 배열의 요소를 삭제해도 매핑된 변수를 삭제하지 않으면 메모리에 그대로 살아있다. 

# 5) Python Array (= Dynamic array)
# - 파이썬은 정석적인 array를 기본 자료형으로 지원하지 않는다. (numpy와 같은 패키지를 통해 구현가능) 
# - 파이썬의 array는 List로 구현되어 List의 성격을 가지지만 내부 구현은 배열처럼 되어있다.
# - 그러므로 가변크기를 가지며, 요소들이 연속적인 메모리 주소를 할당받고, index를 사용한 접근이 가능하다.
