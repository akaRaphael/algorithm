# 1) Tree란?
# - Tree는 노드와 브랜치를 이용하여 구현된, 사이클이 없는 자료구조다.
# - Tree는 이진트리의 형태로 구현되어 탐색 알고리즘 구현에 사용된다. 

# 2) Binary Tree(이진탐색트리)란?
# - 자식노드가 최대 2개로 이루어진 트리 
# - 이진탐색(검색)트리의 형태로 탐색을 위해 자주 사용된다. 

# 3) Binary Search Tree란?
# - 왼쪽노드가 반드시 오른쪽 노드보다 작은 값을 유지하는 형태의 트리를 말한다.
# - 부모노드를 기준으로 왼쪽에는 부모보다 작은 값이, 오른쪽에는 부모보다 큰 값이 정렬된다.

# 4) Binary Search Tree의 장점
#  - 검색에 용이하다. 한번 분류될 때마다 탐색해야하는 데이터의 수가 50%씩 줄어들기 때문이다.
#  - 즉, O(log n) 의 시간복잡도를 갖게된다. 

# 5) Binary Search Tree의 단점
# - 구현이 복잡하다. 
# - 탐색에는 용이하지만, 삽입/삭제의 경우 용이하지 않다. 재정렬이 필요하기 때문이다. 

# 6) Tree의 종류 
# a. Full binary Tree
#   - 모든 노드가 0개 또는 2개의 자식노드를 가지고 있는 이진트리 

# b. Perfect Binary Tree
#   - 모든 부모노드가 2개의 자식노드를 가지고 있는 이진트리 
#   - 모든 단말노드(leaf)가 동일한 level을 가진 이진트리 

# c. Complete Binary Tree(완전이진트리)
#   - 마지막 level 이전까지 모든 노드가 채워진 이진트리 
#   - 마지막 level의 단말노드(leaf)는 왼쪽 노드부터 채워지는 이진트리 
#   - 완전이진트리를 이용하여 구현된 Binary heap을 Heap이라고 부른다.

# d. Degenerate or Pathological Tree
#   - 모든 노드가 1개의 자식노드만을 가진 트리 
#   - 연결리스트와 성능은 동일하다. 